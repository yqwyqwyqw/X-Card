#include <Arduino.h>
#include <U8g2lib.h>
#include <ESP8266WiFi.h>
#include <DS3231.h>
#include <SPI.h>
#include <Wire.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
/*    OLED   */		
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ D4, /* data=*/ D3, /* reset=*/ U8X8_PIN_NONE);   // All Boards without Reset of the Display
/*    DS3231     */
DateTime dt(2020, 03, 13, 01, 01, 0, 5);
DS3231 RTC;
/*     WIFI      */
wl_status_t wifi_handle;
/*		 ±º‰NTP		*/
const char Days[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "ntp1.aliyun.com", 60 * 60 * 8, 30 * 60 * 1000);

//static const unsigned char PROGMEM robofuture[] = {
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
//  0x00, 0x00, 0xFE, 0x01, 0x00, 0x07, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
//  0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x07, 0x00, 0x80, 0x7F, 0x00, 0x00,
//  0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x07, 0x00, 0x80, 0x1F, 0x00,
//  0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x87, 0x0F, 0x77, 0xE0, 0xC3, 0x03,
//  0xE7, 0x70, 0xCE, 0xE1, 0xF8, 0x00, 0x9E, 0xC7, 0x1F, 0xF7, 0xF0, 0xC7,
//  0x03, 0xE7, 0x78, 0xEE, 0xF1, 0xFC, 0x03, 0xDE, 0xE7, 0x3F, 0xF7, 0xF9,
//  0xCF, 0x03, 0xF7, 0x78, 0xEF, 0xF9, 0xFE, 0x03, 0xDE, 0xF3, 0x3D, 0xF7,
//  0x79, 0xCF, 0x07, 0xE7, 0x7C, 0xEF, 0xF9, 0x9E, 0x07, 0xDE, 0xF3, 0x38,
//  0xC7, 0x39, 0xDE, 0x07, 0xF7, 0x3C, 0xEF, 0x79, 0xEE, 0x07, 0xDE, 0xF3,
//  0x38, 0xC7, 0x39, 0xDE, 0x07, 0xE7, 0x3C, 0xEF, 0x79, 0x1E, 0x00, 0xDE,
//  0xE7, 0x3F, 0xFF, 0xF9, 0xCF, 0x03, 0xFF, 0x3C, 0xFE, 0x79, 0x1E, 0x00,
//  0x9E, 0xE7, 0x1F, 0xFF, 0xF1, 0xCF, 0x03, 0xFF, 0x3C, 0xFE, 0x78, 0xFC,
//  0x00, 0x9E, 0xC7, 0x1F, 0xFE, 0xF0, 0xC7, 0x03, 0x7E, 0x3C, 0xFC, 0x78,
//  0xFC, 0x01, 0x1C, 0x07, 0x07, 0x38, 0xC0, 0x81, 0x03, 0x1C, 0x18, 0x38,
//  0x30, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  0x00, 0x00, 0x00, 0x00, };
static const unsigned char PROGMEM robofuture[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC1, 0x00, 0x00,
  0x00, 0x40, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x00, 0x00, 0x60, 0xE0, 0x00,
  0x07, 0x00, 0x60, 0xFC, 0xEF, 0x79, 0x00, 0x00, 0x00, 0x00, 0x70, 0x60,
  0x80, 0x07, 0x80, 0xF8, 0x5F, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 0x38,
  0x30, 0xC0, 0x02, 0xE0, 0x7F, 0x00, 0x06, 0xFE, 0xFF, 0x00, 0x00, 0x00,
  0x08, 0x18, 0x40, 0x02, 0xC0, 0x1A, 0x80, 0xFB, 0x9F, 0x94, 0x01, 0x00,
  0x00, 0x0C, 0x0E, 0x60, 0x01, 0x00, 0x0C, 0xE0, 0x07, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x07, 0xB0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x00, 0xC3, 0x01, 0x50, 0x00, 0x00, 0x06, 0x00, 0x80, 0x03,
  0x80, 0x00, 0x00, 0x80, 0xFB, 0x00, 0x38, 0x08, 0x00, 0xF3, 0x27, 0x80,
  0x03, 0xC0, 0x00, 0x00, 0xC0, 0x1F, 0xB8, 0x19, 0x2C, 0xA0, 0xFF, 0x73,
  0xC6, 0x31, 0xC6, 0xE3, 0x01, 0xF8, 0x02, 0xD8, 0x6D, 0x77, 0xE0, 0xCF,
  0x30, 0xC6, 0x30, 0xC2, 0xB3, 0x00, 0x78, 0x00, 0x8C, 0xE7, 0xF3, 0xC0,
  0x00, 0x18, 0x63, 0x9C, 0xA3, 0x99, 0x04, 0xF0, 0x00, 0x84, 0xF6, 0x31,
  0xE0, 0x00, 0x98, 0x71, 0x8E, 0x99, 0x6C, 0x03, 0xF0, 0x01, 0xC6, 0x92,
  0x11, 0x60, 0x00, 0xCC, 0x69, 0xCF, 0xC9, 0xBE, 0x01, 0x98, 0x03, 0x74,
  0x1A, 0x1D, 0x70, 0x00, 0x6C, 0xEF, 0xBD, 0xCF, 0xCB, 0x00, 0x18, 0x0E,
  0x38, 0x06, 0x07, 0x30, 0x00, 0x3C, 0x43, 0x1C, 0x83, 0x38, 0x00, 0x0C,
  0x3C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0C, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

static const unsigned char PROGMEM weixin[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFC, 0x9F, 0x4F, 0x72, 0xC8, 0x07, 0xF9, 0x3F,
  0x0C, 0x98, 0xFF, 0xEF, 0xC0, 0xF8, 0x19, 0x30, 0x04, 0x90, 0xFF, 0xEF,
  0xC1, 0xF8, 0x19, 0x20, 0xE4, 0x9B, 0x6F, 0x9F, 0x7F, 0x30, 0xC8, 0x27,
  0xE4, 0x93, 0x0F, 0xFE, 0xFF, 0x32, 0xD8, 0x27, 0xE4, 0x1B, 0x0F, 0xFF,
  0xF3, 0xF7, 0xC8, 0x27, 0xE4, 0x13, 0x9C, 0x83, 0x79, 0x08, 0xC8, 0x27,
  0xE4, 0x1B, 0x9C, 0x83, 0xFD, 0x08, 0xD8, 0x27, 0x04, 0x90, 0x00, 0x80,
  0x09, 0xC6, 0x09, 0x20, 0x94, 0x99, 0x08, 0x80, 0x4D, 0xA6, 0x99, 0x39,
  0xFC, 0x9F, 0x6C, 0xB3, 0x49, 0x32, 0xF9, 0x3F, 0x00, 0x80, 0x00, 0x4C,
  0x30, 0x06, 0x01, 0x00, 0x00, 0x80, 0x00, 0x6C, 0x30, 0x06, 0x03, 0x00,
  0xE0, 0x9B, 0x93, 0x9C, 0x37, 0x32, 0x3F, 0x3E, 0xFC, 0x04, 0x03, 0x1C,
  0x0C, 0xF8, 0x3B, 0x24, 0xFC, 0x0C, 0x03, 0x3C, 0x08, 0xFC, 0x39, 0x26,
  0x60, 0x9F, 0x90, 0xEF, 0x49, 0xFE, 0x38, 0x38, 0x60, 0x9F, 0x90, 0xCF,
  0xCD, 0xFE, 0x38, 0x38, 0xFC, 0x0F, 0x6C, 0xEC, 0xF7, 0xF1, 0x18, 0x38,
  0x5C, 0x8C, 0x80, 0x0C, 0x86, 0xB1, 0x0D, 0x3C, 0x1C, 0x9C, 0x80, 0x0C,
  0x0E, 0x3D, 0x1F, 0x3C, 0xE0, 0x8C, 0x60, 0xC0, 0x07, 0x38, 0x26, 0x07,
  0xE0, 0xD5, 0x51, 0xF3, 0x27, 0x78, 0xB8, 0x2B, 0xE4, 0xFB, 0x93, 0x73,
  0xF2, 0xF8, 0xF8, 0x39, 0x1C, 0x07, 0x0F, 0x8F, 0x01, 0x30, 0x1C, 0x18,
  0x1C, 0x0F, 0x0F, 0x8E, 0x01, 0x30, 0x0E, 0x18, 0x20, 0x98, 0x0F, 0x42,
  0xFC, 0x3F, 0xCE, 0x3C, 0xE0, 0xD9, 0x9D, 0x07, 0xDC, 0x15, 0x5E, 0x24,
  0xF8, 0xE7, 0xFC, 0x0F, 0xCE, 0x01, 0x37, 0x00, 0x64, 0x1B, 0xBC, 0x17,
  0xC6, 0xE1, 0x0E, 0x38, 0x64, 0x13, 0x9C, 0x13, 0xC2, 0x71, 0x0E, 0x38,
  0xC4, 0x8C, 0x03, 0x6C, 0x30, 0x36, 0xC9, 0x20, 0x08, 0xEC, 0x03, 0x1A,
  0xB0, 0x27, 0xFD, 0x1A, 0x18, 0xFC, 0x93, 0x33, 0xF0, 0x0F, 0xFE, 0x1F,
  0x24, 0x8F, 0x43, 0xC2, 0xF1, 0x36, 0x38, 0x00, 0x24, 0x87, 0x63, 0xE3,
  0x71, 0x36, 0x38, 0x00, 0x00, 0xFF, 0x80, 0xCC, 0xCF, 0xFF, 0x00, 0x24,
  0x20, 0xFB, 0x40, 0xEB, 0xEF, 0x7F, 0x00, 0x24, 0x20, 0xE3, 0x7C, 0x43,
  0xFE, 0x37, 0x36, 0x20, 0xC0, 0x90, 0xBC, 0xF3, 0x0F, 0x36, 0xF9, 0x3F,
  0x90, 0x92, 0x9D, 0xF3, 0x0F, 0x32, 0x99, 0x3F, 0x3C, 0x8F, 0x9F, 0xC3,
  0x33, 0x36, 0x07, 0x27, 0xEC, 0x9C, 0x6F, 0x3C, 0x07, 0xF0, 0xC8, 0x3F,
  0xE4, 0x9C, 0x6F, 0x1C, 0x02, 0xF0, 0xD8, 0x3F, 0x04, 0x87, 0x03, 0x02,
  0xCE, 0x32, 0x07, 0x1B, 0x04, 0xCF, 0x03, 0x03, 0x4F, 0x26, 0x07, 0x19,
  0x84, 0xFC, 0x0F, 0x8E, 0x33, 0xC8, 0xFF, 0x1C, 0x00, 0xC0, 0x10, 0x90,
  0x0F, 0x0C, 0xC3, 0x18, 0x00, 0x80, 0x10, 0xB0, 0x0F, 0x08, 0xC1, 0x18,
  0xFC, 0x1F, 0xEC, 0xFC, 0xF3, 0x30, 0xD9, 0x3B, 0xAC, 0x19, 0x8E, 0xF7,
  0x27, 0x30, 0xC1, 0x11, 0x04, 0x18, 0x8F, 0xF3, 0x8F, 0x31, 0xC1, 0x00,
  0xE4, 0x93, 0x90, 0x73, 0xFE, 0xCF, 0xFF, 0x1C, 0xE4, 0x9B, 0x98, 0x73,
  0xFE, 0xCF, 0xFF, 0x0E, 0xE4, 0x93, 0x1C, 0x83, 0x31, 0x00, 0x39, 0x01,
  0xE4, 0x93, 0x6C, 0x03, 0x38, 0x80, 0x35, 0x02, 0xE4, 0x9B, 0xEC, 0x33,
  0x3C, 0xF6, 0x26, 0x24, 0x04, 0x10, 0x60, 0xCE, 0x73, 0xC2, 0xDF, 0x20,
  0x0C, 0x18, 0x60, 0xCF, 0xF3, 0xC2, 0xDF, 0x30, 0xFC, 0x1F, 0xEC, 0x43,
  0x76, 0xF0, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static const unsigned char PROGMEM tenxunqq[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0x0C, 0x19, 0x0E, 0x7F, 0xFE, 0x3F,
  0x5C, 0x75, 0x85, 0xA7, 0x06, 0xFC, 0x5E, 0x35, 0x0C, 0x60, 0xC3, 0xE7,
  0x01, 0x70, 0x06, 0x30, 0xCC, 0x23, 0xFF, 0x7B, 0x02, 0x30, 0xE6, 0x33,
  0xE4, 0x67, 0xFF, 0x79, 0x06, 0x30, 0xE6, 0x37, 0xEC, 0x27, 0xFC, 0xFE,
  0x09, 0x0C, 0xE6, 0x33, 0xEC, 0x67, 0xFC, 0xFC, 0x09, 0x0C, 0xE6, 0x37,
  0xE4, 0x27, 0x03, 0x78, 0x1C, 0x3C, 0xE6, 0x33, 0xCC, 0x63, 0x03, 0x78,
  0x18, 0x1C, 0xE6, 0x33, 0x04, 0x20, 0xCF, 0x64, 0xFC, 0x63, 0x06, 0x30,
  0x0C, 0x70, 0xCF, 0x64, 0xF8, 0xE3, 0x06, 0x30, 0xFC, 0x3F, 0x33, 0x9B,
  0xCD, 0x4C, 0xFE, 0x3F, 0x64, 0x1B, 0x1B, 0x01, 0xBE, 0x4A, 0x64, 0x1B,
  0x00, 0x00, 0x0F, 0x03, 0x3E, 0x33, 0x00, 0x00, 0x9C, 0xE1, 0x30, 0x06,
  0xF0, 0x33, 0x7C, 0x0E, 0x9C, 0xE1, 0x30, 0x04, 0xE0, 0x13, 0x7E, 0x0E,
  0x78, 0xC2, 0x73, 0xF8, 0xC0, 0xEF, 0x87, 0x37, 0x70, 0x86, 0xF3, 0xF8,
  0xC1, 0xCF, 0x87, 0x33, 0x8C, 0x27, 0x3C, 0x1C, 0x38, 0x03, 0x78, 0x3C,
  0x84, 0x67, 0x3C, 0x1E, 0x3C, 0x03, 0x78, 0x38, 0x60, 0xC6, 0x03, 0x9C,
  0x19, 0xF3, 0x66, 0x3C, 0x60, 0x82, 0x03, 0x9E, 0x1D, 0x73, 0x26, 0x38,
  0xE0, 0x61, 0x03, 0x03, 0xF2, 0xFF, 0x06, 0x30, 0x80, 0x01, 0xA2, 0x03,
  0xE0, 0x25, 0x06, 0x38, 0x80, 0x01, 0xF0, 0x67, 0xC0, 0x00, 0x66, 0x3F,
  0x1C, 0xF8, 0xBF, 0x1F, 0x08, 0xF3, 0x1F, 0x1C, 0x1C, 0xF8, 0x3F, 0x1F,
  0x1C, 0xF3, 0x1F, 0x0C, 0x7C, 0x1E, 0x07, 0x9F, 0x23, 0xEF, 0x9E, 0x08,
  0x7C, 0x1E, 0x03, 0x9F, 0x33, 0xEF, 0x9E, 0x09, 0x7C, 0xFE, 0xFF, 0x06,
  0x20, 0x7F, 0x66, 0x30, 0x7C, 0xFE, 0x7F, 0x04, 0x20, 0xFF, 0x26, 0x32,
  0xE4, 0xC1, 0x30, 0x80, 0xDD, 0xF0, 0x81, 0x03, 0x8C, 0xC2, 0x32, 0x80,
  0x8F, 0x59, 0x82, 0x1D, 0x04, 0xE6, 0x33, 0x98, 0x1F, 0x0F, 0x86, 0x39,
  0xCC, 0xEA, 0x51, 0x80, 0x1F, 0x17, 0x06, 0x10, 0xE4, 0x99, 0xC0, 0x80,
  0x3F, 0x93, 0x07, 0x00, 0x98, 0x3F, 0xCF, 0xF1, 0x01, 0xEF, 0x03, 0x08,
  0x98, 0x7F, 0xCF, 0xFB, 0x01, 0xCF, 0x01, 0x0C, 0xF0, 0x19, 0xCE, 0xFB,
  0xF9, 0xCC, 0x9F, 0x30, 0xF8, 0x19, 0xCF, 0xFB, 0xFD, 0xCC, 0x9F, 0x31,
  0x7C, 0x78, 0xFF, 0x1F, 0xF8, 0xEC, 0x9E, 0x33, 0x7C, 0x38, 0xFF, 0x1F,
  0xF8, 0x4C, 0x9E, 0x37, 0x18, 0x18, 0xCF, 0x1F, 0x00, 0x3F, 0x98, 0x3C,
  0x10, 0x16, 0xCE, 0x1D, 0x40, 0x56, 0x7E, 0x20, 0x8C, 0x67, 0xCC, 0x18,
  0xC0, 0xE0, 0x7F, 0x00, 0x00, 0x02, 0xC9, 0x18, 0xC2, 0xE9, 0x65, 0x02,
  0x00, 0x00, 0xC3, 0x86, 0xC3, 0xFF, 0x60, 0x32, 0xFC, 0x3F, 0xF3, 0x1C,
  0xCC, 0x63, 0x64, 0x0F, 0xFC, 0x7F, 0xF3, 0x1C, 0xDC, 0xE3, 0x66, 0x0E,
  0x04, 0x20, 0xCC, 0x60, 0xC2, 0x43, 0xE0, 0x01, 0x0C, 0x60, 0xCC, 0x60,
  0xC6, 0xE3, 0xE0, 0x01, 0xEC, 0x37, 0x00, 0xE7, 0x01, 0xCF, 0x7F, 0x38,
  0xE4, 0x67, 0x00, 0xEF, 0x01, 0xEF, 0x7F, 0x3C, 0xEC, 0x27, 0x0F, 0x9F,
  0x33, 0x1F, 0xE6, 0x3F, 0xEC, 0x67, 0xC2, 0x9B, 0x43, 0x1F, 0x78, 0x3D,
  0xE4, 0x27, 0xC0, 0x99, 0xC1, 0x33, 0x78, 0x3C, 0x8C, 0x61, 0x8A, 0xBB,
  0xE2, 0x7B, 0x78, 0x10, 0x04, 0x20, 0x0F, 0x79, 0xF6, 0x7F, 0x66, 0x00,
  0xFC, 0x7F, 0x0F, 0x00, 0xC0, 0xF8, 0x61, 0x08, 0xFC, 0x3F, 0x0F, 0x00,
  0xC0, 0xF0, 0x61, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
  WiFi.begin("huawei", "qazwsxedc");
  //while (WiFi.status() != WL_CONNECTED);

  u8g2.begin();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.clearBuffer();

  u8g2.drawXBMP(64, 0, 64, 64, weixin);
  u8g2.sendBuffer();
  delay(10000);
  u8g2.clearBuffer();
  u8g2.drawXBMP(64, 0, 64, 64, tenxunqq);
  u8g2.sendBuffer();
  delay(10000);

  //RTC.adjust(dt);
  Wire.begin(D5,D6);
  RTC.begin();

}

DateTime time_update(unsigned long time) {
	unsigned int Pass4year;
	int hours_per_year;
	int year,month,day,hour,min,sec;
	if (time < 0)
	{
		time = 0;
	}
	//»°√Î ±º‰
	sec = (int)(time % 60);
	time /= 60;
	//»°∑÷÷” ±º‰
	min = (int)(time % 60);
	time /= 60;
	//»°π˝»•∂‡…Ÿ∏ˆÀƒƒÍ£¨√øÀƒƒÍ”– 1461*24 –° ±
	Pass4year = ((unsigned int)time / (1461L * 24L));
	//º∆À„ƒÍ∑›
	year = (Pass4year << 2) + 1970;
	//ÀƒƒÍ÷– £œ¬µƒ–° ± ˝
	time %= 1461L * 24L;
	//–£’˝»ÚƒÍ”∞œÏµƒƒÍ∑›£¨º∆À„“ªƒÍ÷– £œ¬µƒ–° ± ˝
	for (;;)
	{
		//“ªƒÍµƒ–° ± ˝
		hours_per_year = 365 * 24;
		//≈–∂œ»ÚƒÍ
		if ((year & 3) == 0)
		{
			// «»ÚƒÍ£¨“ªƒÍ‘Ú∂‡24–° ±£¨º¥“ªÃÏ
			hours_per_year += 24;
		}
		if (time < hours_per_year)
		{
			break;
		}
		year++;
		time -= hours_per_year;
	}
	//–° ± ˝
	hour = (int)(time % 24);
	//“ªƒÍ÷– £œ¬µƒÃÏ ˝
	time /= 24;
	//ºŸ∂®Œ™»ÚƒÍ
	time++;
	//–£’˝»ÚƒÍµƒŒÛ≤Ó£¨º∆À„‘¬∑›£¨»’∆⁄
	if ((year & 3) == 0)
	{
		if (time > 60)
		{
			time--;
		}
		else
		{
			if (time == 60)
			{
				month = 1;
				day = 29;
				DateTime result(year, month, day, hour, min, sec, 1);
				return result;
			}
		}
	}
	//º∆À„‘¬»’
	for (month = 0; Days[month] < time; month++)
	{
		time -= Days[month];
	}

	day = (int)(time);
	DateTime result(year, month, day, hour, min, sec, 1);
	return result;
}

void display_timeupdate(DateTime dtime) {
	//Serial.printf("%d-%d-%d", dtime.year(), dtime.month(), dtime.date());
	//Serial.printf("%d-%d-%d", dtime.hour(), dtime.minute(), dtime.second());
	u8g2.setCursor(10, 60);
	u8g2.printf("%d-%d-%d %d : %d : %d", dtime.year(), dtime.month(), dtime.date(), dtime.hour(), dtime.minute(), dtime.second());
}

void loop() {
  // put your main code here, to run repeatedly:
	wifi_handle = WiFi.status();
	u8g2.clearBuffer();
	DateTime now = RTC.now();
	if (wifi_handle == WL_CONNECTED ) {
		timeClient.begin();
		timeClient.update();
		now = time_update(timeClient.getEpochTime());
		RTC.adjust(now);
		//Serial.println(timeClient.getEpochTime());
		//Serial.println(timeClient.getDay());
		//Serial.println(timeClient.getFormattedTime());
	}
	u8g2.drawXBMP(14 ,15,100,34, robofuture);
	display_timeupdate(now);
	u8g2.sendBuffer();
	delay(1000);

}
